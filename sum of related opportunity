trigger to find sum of all related opportunity amount of a account.

trigger OpportunityManager on Opportunity (after insert, after update, after delete) 
{
     List<String> accountIds = new List<String>();
    if(Trigger.isInsert || Trigger.isUpdate){
        for(Opportunity opp: Trigger.new){
            accountIds.add(opp.AccountId);
        }
    }
    if(Trigger.isDelete){
        for(Opportunity opp: Trigger.old){
            accountIds.add(opp.AccountId);
        }
    }
  
    List<AggregateResult> aggResult = [SELECT AccountId , SUM(Amount) sumAmt
                                FROM Opportunity
                                WHERE AccountId IN : accountIds
                                GROUP BY AccountId]; 
    List<Account> accountToUpdate = new List<Account>();
    for(AggregateResult agg: aggResult){
        Account acc = new Account();
        acc.Id = (Id)agg.get('AccountId');
        acc.Top_Amount__c = (Decimal)agg.get('sumAmt');
        accountToUpdate.add(acc);
    }
    update accountToUpdate;
}



2nd method


trigger MaxMinOppAcc on Opportunity (after insert, after update,after delete)
{
    List<String> accSt = new List<String>();
    List<Account> updateAcc = new List<Account>();
    if(trigger.isInsert || trigger.isUpdate)
    {
        for(Opportunity opp : trigger.new)
        {
            accSt.add(opp.AccountId);
        }
    }
    if(trigger.isDelete)
    {
      for(Opportunity opp : trigger.old)
        {
            accSt.add(opp.AccountId);
        }  
    }
    for(AggregateResult aggr : [Select AccountId ,SUM(Amount)sumam from Opportunity where AccountId IN:accSt GROUP by AccountId])
    {
        Account acc = new Account();
        acc.Id =(string)aggr.get('AccountId');
        acc.Total_Amount__c =(Decimal)aggr.get('sumam');
        updateAcc.add(acc);
    }
    if(!updateAcc.isEmpty())
    {
        update updateAcc;
    }
    
} 
