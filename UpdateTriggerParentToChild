here we can update child record by parent record.
whenever we want to go with any updated related record that time we should use After trigger event
Whenever Account's Phone field is updated then all related contact's phone field should also get updated with parent Account's Phone.
here we will use context variable.
isAfter , old , oldMap
isAfter: It return true if trigger was fired after record get saved to data base.(after insert or after delete)
old:
It returns list of old version of sObject records , This Sobject list of trigger.old only available in update and delete trigger.
oldMap:
It return a Map of the old version of the sObject record. This Sobject list of trigger.old only available in update and delete trigger.




trigger AfterTrigger on Account (after update)
{
    Map<Id,Account> accMap = new Map<Id,Account>();
    if(trigger.isAfter && trigger.isUpdate)
    {
        if(!trigger.new.isEmpty())    //we will perform null check to To check if a Text field is empty
        {
            for(Account acc : trigger.new)
            {
                if(trigger.oldMap.get(acc.id).Phone !=acc.Phone) //if the value entered by user in form field is not equal to the existing form field value for that we will use oldMap because we want to check old value of record
                {
                    accMap.put(acc.Id,acc);
                }
                
            }
        }
    }
    List<Contact> conList = [Select Id , AccountId , Phone from Contact where AccountId IN : accMap.keySet()]; // this keyset method return all account ID 
    List<Contact> listToUpdateContacts = new List<Contact>();   // DML operation
    if(!conList.isEmpty())
    {
        for(Contact con : conList)
        {
            con.Phone = accMap.get(con.AccountId).Phone;
            listToUpdateContacts.add(con);
        }
    }
    if(!listToUpdateContacts.isEmpty())
    {
        update listToUpdateContacts;
    }
}

